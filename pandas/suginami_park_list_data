import camelot
import pandas as pd
import numpy as np
import folium
import requests
from bs4 import BeautifulSoup
import time
from tqdm import tqdm

file_name = "tokyo_park_list.pdf"
read_file = camelot.read_pdf(file_name)

def suginami_list():
    suginami_pages = []
    pages = ['90','91','92','93','94','95','96','97','98']
    for page in pages:
        read_page = camelot.read_pdf("tokyo_park_list.pdf", pages=page)
        suginami_page = read_page.export('{0}.csv'.format(page), f='csv')
        suginami_pages.append(suginami_page)
    return suginami_pages
    
suginami_list()

df1 = pd.read_csv("90-page-90-table-1.csv")
df2 = pd.read_csv("91-page-91-table-1.csv")
df3 = pd.read_csv("92-page-92-table-1.csv")
df4 = pd.read_csv("93-page-93-table-1.csv")
df5 = pd.read_csv("94-page-94-table-1.csv")
df6 = pd.read_csv("95-page-95-table-1.csv")
df7 = pd.read_csv("96-page-96-table-1.csv")
df8 = pd.read_csv("97-page-97-table-1.csv")
df9 = pd.read_csv("98-page-98-table-1.csv")

df = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8, df9], ignore_index=True)
df = df.replace( '\n', '', regex=True)
df = df.replace( '　', '', regex=True)
df = df.replace( ' ', '', regex=True)
df = df.rename(columns={"公　　　園　　　名":"公園名", "位　　　　　　　　　　置":"位置", "面　積　㎡":"面積", "備　　　　　考":"備考"})
df["公園名"] = df["公園名"].str.replace('〃', '公園')
df["位置"] = df["位置"].str.replace('〃', '杉並区')
df["面積"] = df["面積"].str.replace('区', '㎡')
df.drop(277, inplace=True)
df["面積"] = df["面積"].str.replace('都', '')
df["面積"] = df["面積"].str.replace('㎡', '')
df["面積"] = df["面積"].str.replace('国', '')
df.drop(['土地所有別㎡', '開園年月日\n移管年月日'], axis='columns', inplace=True)
df["面積"] = df["面積"].str.replace(',', '')
df['面積'] = pd.to_numeric(df['面積'])
df = df.sort_values(by="面積", ascending=False)
for n in range(0, 278):
    df["公園名"] = df["公園名"].str.replace(str(n), '')
df

map_test = folium.Map(location=[35.707409, 139.625657], zoom_start=17)
marker1 = folium.Marker(location=[35.707409, 139.625657], popup='Home', icon=folium.Icon(color='red'))
marker1.add_to(map_test)
map_test

def get_lat_lon_from_address(address_l):
    """
    address_lにlistの形で住所を入れてあげると、latlonsという入れ子上のリストで緯度経度のリストを返す関数。
    >>>>get_lat_lon_from_address(['東京都文京区本郷7-3-1','東京都文京区湯島３丁目３０−１'])
    [['35.712056', '139.762775'], ['35.707771', '139.768205']]
    """
    url = 'http://www.geocoding.jp/api/'
    latlons = []
    for address in tqdm(address_l):
        payload = {"v": 1.1, 'q': address}
        r = requests.get(url, params=payload)
        ret = BeautifulSoup(r.content,'lxml')
        if ret.find('error'):
            raise ValueError(f"Invalid address submitted. {address}")
        else:
            lat = ret.find('lat').string
            lon = ret.find('lng').string
            latlons.append([lat,lon])
            df.loc[address, "緯度"] = lat
            df.loc[address, "軽度"] = lon
            time.sleep(10)
    return latlons
get_lat_lon_from_address(df["位置"])
