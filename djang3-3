###レコード取得の基本とManager###
    #レコードを表示    →   アプリ名/views.pyに記述
        from django.shortcuts import render
        from django.http import HttpResponse
        from .models import Friend
        
        def index(request):
            data = Friend.objects.all()
            params = {
                    'title': 'Hello',
                    'message': 'all friends.',
                    'data': data,
                }
            return render(request, 'hello/index.html', params)
            
    #モデルの「objects」「all」
        data = Friend.objects.all()
        objectsには、「Manager」というクラスのインスタンスが設定されている。
        すべてのレコードを取り出すには、objectsの「all」というメソッドを利用する
        allは、テーブルにあるレコードをモデルのインスタンスにセット(たくさんの値をまとめて扱うオブジェクト)として取り出す。
        1つ1つのレコードをモデルのインスタンスにして、それをセットにまとめてある
        
    #モデルの内容を表示  →   templates/アプリ名/index.htmlに記述
        {% load static %]
        <!doctype html>
        <html lang="ja">
        <head>
            <meta charset="utf-8">
            <title>{{title}}</title>
            <link rel="stylesheet" type="text/css" href="{% static 'hello/css/style.css' %}
        </head>
        <body>
            <h1>{{title}}</h1>
            <p>{{message|safe}}</p>
            <table>
                <tr>
                    <th>ID</th>
                    <th>NAME</th>
                    <th>GENDER</th>
                    <th>MAIL</th>
                    <th>AGE</th>
                    <th>BIRTHDAY</th>
                </tr>
            {% for item in data %}
                <tr>
                    <td>{{item.id}}</td>
                    <td>{{item.name}}</td>
                    <td>{% if item.gender == False %}male{% endif %}
                        {% if item.gender == True %}female{% endif %}</td>
                    <td>{{item.mail}}</td>
                    <td>{{item.age}}</td>
                    <td>{{item.birthday}}</td>
                </tr>
            {% endfor %}
            </table>
        </body>
        </html>
        
        #for inで繰り返し表示
            {% for item in data %}
                繰り返す表示
            {% endfor %}
    #idとは
        idという値は用意してない。これはDjangoが自動的に追加する値・
        データベースでは、テーブルのレコードにすべて「プライマリキー」と呼ばれるものを用意している。
        これは、すべてのレコードで異なる値が割り振られている特別な項目。
        プライマリキーという値を使って1つ1つのレコードを識別している
        
        #ifタグで条件分岐
            {% if 条件 %}
                表示内容
            {% endif %}
            {% if item.gender == False %}male{% endif %}
            {% if item.gender == True %}female{% endif %}
            
    #モデルの表示を完成させよう  →   アプリ名/urls.pyに記述 and css
        from django.urls import path
        from . import views
        
        urlpatterns = [
            path('', views.index, name='index'),
        ]
     
       ####css
       table {
            margin: 10px;
            font-size: 14px;
        }

        table tr th {
            background-color: #009;
            color: #fff;
            padding: 2px 10p;
            border-size: 2px;
        }

        table tr td {
            background-color: #eee;
            color: #666;
            padding: 2px 10px;
            border-size: 2px;
        }
        
    #指定のIDのレコードだけ取り出す   →   アプリ名/forms.pyに記述
        from django import forms
        
        class HelloForm(forms.Form):
            id = forms.IntegerField(label='ID')
            
        #index.htmlを修正
            テーブルを表示する<table>タグの前に、フォームを表示する<table>タグを追記。{{ form.as_table }}で、フォームを表示。
            <body>
            <h1>{{title}}</h1>
            <p>{{message|safe}}</p>
            <table>
            <form action="{% url 'index' %}" method="post">
                {% csrf_token %}
                {{ form.as_table }}
                <tr><td></td><td><input type="submit" value="click"></td></tr>
            </form>
            </table>
            <hr>
            <table>
                <tr>
                    <th>IDth>
                    <th>NAME</th>
                    <th>GENDER</th>
                    <th>MAIL</th>
                    <th>AGE</th>
                    <th>BIRTHDAY</th>
                </tr>
            {% for item in data %}
                <tr>
                    <td>{{item.id}}</td>
                    <td>{{item.name}}</td>
                    <td>{% if item.gender == False %}male{% endif %}
                        {% if item.gender == True %}female{% endif %}</td>
                    <td>{{item.mail}}</td>
                    <td>{{item.age}}</td>
                    <td>{{item.birthday}}</td>
                </tr>
            {% endfor %}
            </table>
        </body>
    
    #ビュー関数を修正   →   アプリ名/views.py
        from django.shortcuts import render
        from django.http import HttpResponse
        from .models import Friend
        from .forms import HelloForm
        
        def index(request):
            params = {
                    'title': 'Hello',
                    'message': 'all friends.',
                    'from': HelloForm(),
                    'data': [],
                }
            if (request.method == 'POST'):  →   POST送信されたかどうかチェック
                num = request.POST['id']    →   フォームの値を取り出してnumに代入
                item = Friend.objects.get(id=num)   →   objects.getでidの値がnumのレコードを1つだけ取り出した値をitemに代入
                params['data'] = [item] →   getで取り出したインスタンスはセットに入れてparams['data']に代入
                params['form'] = HelloForm(request.POST)
            else:
                params['data'] = Friend.objects.all()
            return render(request, 'hello/index.html', params)
            
    #Managerクラスとは
        「データベースクエリ」を操作するための機能を提供するクラス。
        メソッドなどの内部から、SQLのクエリを作成してデータベースに問い合わせし、その結果(レコードなど)を受け取る。
        pythonのメソッドを、データベースクエリに翻訳して実行するもの
            
            #「データベースクエリ」とは
                データベースに対して、さまざまな要求をするためのもの
                クエリというのは、テーブルへアクセスや、取り出すレコードの条件などの指定
                ※クエリ：データベースへ問い合わせる内容を記述した命令文
                
    #モデルのリストを調べてみる  →   アプリ名/views.pyに記述
        from django.shortcuts import render
        from django.http import HttpResponse
        from .models import Friend
        
        def index(request):
            data = Friend.objects.all() →   テンプレートに渡すだけ
            params = {
                    'title': 'Hello',
                    'data': data,
                }
            return render(request, 'hello/index.html', params)
        
        #index.htmlに記述
        <body>
            <h1>{{title}}</h1>
            <p>{{data}}</p>
            <table>
                <tr>
                    <th>data</th>
                </tr>
            {% for item in data %}
                <tr>
                    <td>{{item}}</td>
                </tr>
            {% endfor %}
            </table>
        </body>
        
        #allで得られるのは「QuerySet」
            QuerySetは、Setの派生くクラス。クエリ取得用にいろいろ機能拡張したセット。
            
    #valuesメソッド
        「レコードの値だけ欲しい」という時にvaluesメソッドを利用。
        
        #アプリ名/views.pyに記述
             def index(request):
                data = Friend.objects.all().values()    →   index.htmlで<p>{{data}}</p>部分で表示（idごこにすべての情報を辞書で表示）
                params = {
                        'title': 'Hello',
                        'data': data,
                    }
                return render(request, 'hello/index.html', params)
    
    #特定の項目だけ取り出す    →   アプリ名/views.pyに記述
        def index(request):
            data = Friend.objects.all().values('id', 'name')    →   valuesで項目を指定
            params = {
                    'title': 'Hello',
                    'data': data,
                }
            return render(request, 'hello/index.html', params)
            
    #リストとして取り出す    →   アプリ名/views.pyに記述
        def index(request):
            data = Friend.objects.all().values_list('id', 'name', 'age')    →   values_listで項目を指定
            params = {
                    'title': 'Hello',
                    'data': data,
                }
            return render(request, 'hello/index.html', params)
            
    #最初と最後、レコード数    →   アプリ名/views.pyに記述
        first：allなどで得られたレコードの内、最初のものだけを返すメソッド
        last：やはり多数のレコードの中から、最後のものだけを返すメソッド
        count：取得したレコード数を返すメソッド
    
        def index(request):
            num = Friend.objects.all().count()
            first = Friend.objects.all().first()
            last = Friend.object.all().last()
            data = [num, first, last]
            params = {
                    'title': 'Hello',
                    'data': data,
                }
            return render(request, 'hello/index.html', params)
            
    #QuesrySetの表示をカスタマイズ    →   アプリ名/views.pyに記述
        from django.shortcuts import render
        from django.http import HttpResponse
        from .models import Friend
        from django.db.models import QuerySet
        
        def __new_str__(self):
            result = ''
            for item in self:
                result += '<tr>'
                for k in item:
                    result += '<td>' + str(k) + '=' + str(item[k]) + '</td>'
                result += '</tr>'
            return result
            
        QuerySet.__str__ = __new_str__
        
        def index(request):
            data = Friend.objects.all().values('id', 'name', 'age')
            params = {
                    'title': 'Hello',
                    'data': data,
                }
            return render(request, 'hello/index.html', params)
        
