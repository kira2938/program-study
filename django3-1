####管理ツールでデータベースを作ろう###

    #データベースの特徴
        #アクセスが速い（スピード）
        #検索が高度
        #膨大なデータを管理できる
        #同時に大勢が使える
        
    #Djangoで使えるデータベース
        #MySQL：オープンソースのデータベース、おそらく現在、もっとも広く使われている
        #PostgreSQL：Linuxなどで広く使われて、日本でも人気の高いデータベース
        #SQLite：データベースファイルに直接アクセスするタイプ、非常に小さいのが特徴、スマートフォンなどでも内部で使っている
        
    #サーバーとエンジン
        #サーバータイプ
            MySQLとPostgreSQLは、「データベースサーバー」と呼ばれているタイプ
            サーバータイプはデータベースにアクセスする専用サーバープログラムを起動し、
            Webサーバとデータベースサーバーの間で通信してデータんｐやり取りを行うタイプ
        #エンジンタイプ
            SQLiteはデータベースファイルに直接アクセスするエンジンプログラム。
            非常に小さいため、スマートフォンにも組み込むことができる
            
    #Djangoには組み込み済み
        pythonは最初からSQLiteが組み込まれている。
        
        
    #データベースの設定
        settings.pyのDATABASEという変数
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME':  os.path.join(BASE_DIR, 'db.sqlite3),
            }
        }
        
        #必要な設定は2つだけ
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3', 
                    (データベースの使われているプログラム。SQLiteの場合、django.db.backends.sqlite3というクラス)
                    'NAME':  os.path.join(BASE_DIR, 'db.sqlite3),  
                    (利用するデータベースの名前。SQLiteの場合、データベースファイルのパスを指定。標準ではos.path.join(BASE_DIR, 'db.sqlite3))
                    (os.path.joinは2つのパスをつなぎ合わせて1つのパスにするもの。
                    引数BASE_DIRはこのプログラムのフォルダのパスが指定された変数→この文は「プロジェクトのフォルダ内にあるdb.sqlite3のパス」)
                }
            }
            
    #他のデータベースを使う場合は
        #MySQLの場合   →   サーバータイプ
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.mysql',   →   エンジンプログラムはdjango.db.backends.mysqlというクラスを使用
                    'NAME': データベース名,
                    'USER': 利用者名,   →   データベースにアクセスする利用者
                    'PASSWORF': パスワード,   →   データベースにアクセスするパスワード
                    'HOST': ホスト名,   →   データベースサーバーが動いているホストコンピューターのアドレス
                    'PORT': '3306', →   通常は3306固定
                }
            }
            
        #PostgreSQLの場合   →   サーバータイプ
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',   →   エンジンプログラムはdjango.db.backends.postgresqlというクラスを使用
                    'NAME': データベース名,
                    'USER': 利用者名,   →   データベースにアクセスする利用者
                    'PASSWORF': パスワード,   →   データベースにアクセスするパスワード
                    'HOST': ホスト名,   →   データベースサーバーが動いているホストコンピューターのアドレス
                    'PORT': '5432', →   通常は5432固定
                }
            }
            
    #データベースの構造について
        データベースは、「データベース」「テーブル」「レコード」で構造されている
        #データベース
            一番土台、SQLiteのような直接ファイルにアクセスするタイプは、データベースのファイルがこれになる
            サーバータイプは、それぞれのアプリケーションごとに、サーバーにデータベースを用意します。
            ただし、このデータベースの中にはデータは保存できない。「テーブル」をまとめて置くための
        #テーブル
            データベースの中に用意するもの、保存するデータの構造を定義するもの
            データベースは、1つの値しかほかんしないわけではない→例えば、名前・メールアドレス・年齢・電話番号・住所…といったものをひとまとめにして保存する
            テーブルは、どういう値を保管するかを定義します。「テキスト値の名前とメールアドレス、整数の値の年齢…」といった具合に、
            どういう値を用意するかを詳しく指定してある
            テーブルが、実際にデータを保管する入れ物になります。
        #レコード
            テーブル中に保管されるでーたのこと。テーブルの定義に従って、必要な値を一式揃えたもの。
            例えば。「名前・メールアドレス・年齢・電話番号・住所」といった項目があったら、レコードも同じく値を一式を揃えないといけない。
            ただし、テーブルでない項目があれば、レコードもなくても良い。
            
    #テーブルを設計しよう
        「このアプリではどういうデータが必要か」を考え、それを元にテーブルおを設計する
            例)
            名前：テキスト値
            メールアドレス：テキスト値
            性別：真偽値「Falseなら男、Trueなら女」
            年齢：整数値
            誕生日：日付値
             
    #モデルを作成しよう
        Djangoはデータベースにテーブルを作っておく必要がない。
        プロジェクトにデータベース関係コードを書いておけば、それを元にデータベースにテーブルを自動生成 →   プロジェクトにテーブルの内容を書いておく
        
        #モデル=テーブル定義?
            テーブルの内容は「モデル」というものを用意する。MVCのM。
            利用するテーブルごとに作成され、テーブルにどんな値を保管するどんな項目があるかといったことをモデルとして定義しておく。
            つまり、モデル=テーブル定義と考えれば良い。更に、そのテーブルのレコードはDjangoでは対応するモデルのインスタンスとして扱われる。
            「モデルのインスタンス=テーブルのレコード」
            このモデルは、プロジェクトの各アプリケーションごとに「model.py」という名前のファイルとして用意されている。
            
        #モデルクラスの作成
            例)
            from django.db import models
            
            class Friend(models.Model):
                name = models.CharField(max_length=100)
                mail = models.EmailField(max_length=200)
                gender = models.BooleanField()
                age = models.IntegerField(default=0)
                bithday = models.DateField()
                
                def __str__(self):
                    return '<Friend:id=' + str(self.id) + ', ' + self.name + '(' + str(self.age) + ')>'
            
            #モデルクラスの書き方
                モデルクラスは、django.db.modelsにある「Model」クラスを継承して作成。
                クラスの中には、保管する値に関する変数を用意しておく。
                ただし、フィールドクラスと違いdjango.db.modelsのクラス。forms.CharFieldクラスとは別のもの。名前は一緒
                class モデル名(models.Model):
                    変数 = フィールドのインスタンス
                        必要なだけ変数を用意
                        
            #__str__とは
                __str__はテキスト値を返すためのもの。
                テンプレートなどで{{}}を使って値を表示する。これはその値をテキスト値に交換したものを書き出している
                
なだで
