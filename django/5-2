### Section5-2 スクリプトを作成
    #フォーム作成
    from django import forms
    from.models import Message, Group, Friend, Good
    from django.contrib.auth.models import User


    #Messageのフォーム
    class MessageForm(forms.ModelForm):
        class Meta:
            model = Message
            fields = ['owner', 'group', 'content']

    #Groupのフォーム
    class GroupForm(forms.ModelForm):
        class Meta:
            model = Group
            field = ['owner', 'title']

    #Friendのフォーム
    class FriendForm(forms.ModelForm):
        class Meta:
            model = Friend
            field = ['owner', 'user', 'group']

    #Goodのフォーム
    class GoodForm(forms.ModelForm):
        class Meta:
            model = Good
            field = ['owner', 'message']

    #検索フォーム
    class SearchFOrm(forms.Form):
        search = forms.CharField(max_length=100)

    #Groupのチェックボックスフォーム
    class GroupCheckForm(forms.Form):
        def __init__(self, user, *args, **kwargs):
            super(GroupCheckForm, self).__init__(*args, **kwargs)
            public = User.objects.filter(username='public').first()
            self.fields['groups'] = forms.MultipleChoiceField(
                    choices = [(item.title, item.title) for item in Group.objects.filter(owner__in = [user,public])],
                    widget = forms.CheckboxSelectMultiple(),
            )

    #Groupの選択メニューフォーム
    class GroupSelectForm(forms.Form):
        def __init__(self, user, *args, **kwargs):
            super(GroupSelectForm, self).__init__(*args, **kwargs)
            self.fields['groups'] = forms.ChoiceField(
                    choices = [('-', '-')] + [(item.title, item.title) for item in Group.objects.filter(owner = user)],
            )

    #Friendチェックボックスフォーム
    class FriendsForm(forms.Form):
        def __init__(self, user, friends=[], vals=[], *args, **kwargs):
            super(FriendsForm, self).__init__(*args, **kwargs)
            self.fields['friends'] = forms.MultipleChoiceField(
                    choices = [(item.user, item.user) for item in friends],
                    widget = forms.CheckboSelectMultiple(),
                    initial = vals
            )

    #Group作成フォーム
    class CreateGroupForm(forms.Form):
        group_name = forms.CharField(max_length=50)

    #投稿フォーム
    class PostForm(forms.Form):
        content = forms.CharField(max_length=500, widget = forms.Textarea)
        def __init__(self, user, *args, **kwargs):
            super(PostForm, self).__init__(*args, **kwargs)
            public = User.objects.filter(username='public').first()
            self.fields['groups'] = forms.ChoiceField(
                    choices = [('-', '-')] + [(item.title, item.title) for item in Group.objects.filter(owner__in = [user, public])],
            )
            
    #GroupCheckFormについて
        ModelForm以外のもの(forms.Formの派生クラス)がポイント。
        #__init__による初期化処理
            def __init__(self, user, *args, **kwargs):
        
        ここでは、superで基底クラスの__init__メソッドを呼び出す。
            super(GroupCheckForm, self).__init__(*args, **kwargs)
        
        初期化の処理は、このクラスだけにしかないとは限りないので、基底クラス（継承する元になっているクラス）みも__init__が用意されていて、
        そこに初期化処理が用意されているかかもしれない。
        そこで、__init__メソッドの最初に、基底クラスの__init__を呼び出して初期化処理を実行させておく。super関数は、第1引数にクラス、第2引数に
        インスタンス自身（self）を指定して呼び出すことで、そのインスタンスの基底クラスのインスタンスのあるメソッドを呼び出す。
        
            public = User.objects.filter(username='public').first()
        publicのUserを取得する。これはfilter(username='public')で検索をし、その一番最初のものをfirstで取り出す。
        
            self.fields['groups'] = forms.MultipleChoiceField(
                choices = [(item.title, item.title) for item in Group.objects.filter(owner__in = [user,public])],
                widget = forms.CheckboxSelectMultiple(),
            )
        これが、一番難関。self.field['groups']というのは、このインスタンスのgroupsフィールド。つまり、ここにフィールドを設定することで、クラスに
        groups変数を用意したのと同じことができる。
        ここでは、MultipleChoiceFieldを設定している。これは複数の選択可能な選択項目のフィールド。choicesに選択項目を用意し、widgetには
        CheckboxSelectMultipleを指定。これは、複数項目をすべてチェックボックスとして用意するウィジェット。
        
        #リスト内包表記    →   [(タプル) for ○○ in ○○]    →    [変数など for横文] 
            choicesの[]はリスト。その中にはタプルとfor横文が書かれている。これが「リスト内包表記」というpython横文。
            変数などの後にfor横文を記述している。このforから次々と値を取り出したものが、そのまま前にある変数に代入され、それがリストの項目として
            酔いされている。つまり、forによる繰り返しでリストの項目を生成する。
           
    #GroupSelectFormについて
        利用者のGroupをメニューに持つプルダウンメニューのフォームを生成する。これも__init__による初期化処理で項目を作成する。
            super(GroupSelectForm, self).__init__(*args, **kwargs)
            self.fields['groups'] = forms.ChoiceField(
                    choices = [('-', '-')] + [(item.title, item.title) for item in Group.objects.filter(owner = user)],
            )
        self.fields['groups']で、groupsという項目を作成してChoiceFieldを設定し、プルダウンメニューを用意。ここでの表示項目は、choicesでリスト
        として用意しているため、ここでもリスト内包表記を利用。
            
            for item in Group.objects.filter(owner = user)
        Groupから、ownerがuser（利用者のUser）であるものをまとめて取り出している。
        ここから順にGroupを取り出し、そとtitleの値をタプルにしてメニューの項目として追加している。
    
    #FriendsFormについて
        基本的なやり方は同じ。
            self.fields['friends'] = forms.MultipleChoiceField(
                    choices = [(item.user, item.user) for item in friends],
                    widget = forms.CheckboSelectMultiple(),
                    initial = vals
            )
        「initial」という値は、初期値の設定で、項目名のリストを指定すると、そこにある項目のチェックがONの状態で表示されるようになる。
        
    #PostFormについて
        通常の投稿とシェア投稿で利用されるフォーム。
            content = forms.CharField(max_length=500, widget = forms.Textarea)
            def __init__(self, user, *args, **kwargs):
                super(PostForm, self).__init__(*args, **kwargs)
                public = User.objects.filter(username='public').first()
                self.fields['groups'] = forms.ChoiceField(
                        choices = [('-', '-')] + [(item.title, item.title) for item in Group.objects.filter(owner__in = [user, public])],
                )
        Charfieldはwidget = forms.Textareaという値が用意されている。<textarea>の表示を使うことを設定する。
        publicのUserを変数publicに取り出しして、self.fields['groups']にChoiceFieldを設定している。
        
        #ダイナミックに項目を作るには__init__
            今回のサンプルでは、あらかじめ項目を変数として用意しておくのではなく、フォームのインスタンスを作成する際に項目を生成させている。
            これには、__init__を活用する。フォームの項目は、self.fieldsというところにまとめられている。self.fields['○○']という値にフィールドを
            設定することで、指定の名前の項目を追加できる。
            
    #urls.py作成  →   アプリ名に新規ファイル作成
        from django.urls import path
        from . import views

        urlpatterns = [
                path('', views.index, name='index'),
                path('groups', views.groups, name='groups'),
                path('add', views.add, name='add'),
                path('creategroup', views.creategroup, name='creategroup'),
                path('post', views.post, name='post'),
                path('share/<int:share_id>', views.share, name='share'),
                path('good/<int:good_id>', views.good, name='good'),
        ]
        
        #プロジェクト名/urls.pyに追記
            path('アプリ名/', include('アプリ名.urls')),
