### Section5-2 スクリプトを作成
    #フォーム作成
    from django import forms
    from.models import Message, Group, Friend, Good
    from django.contrib.auth.models import User


    #Messageのフォーム
    class MessageForm(forms.ModelForm):
        class Meta:
            model = Message
            fields = ['owner', 'group', 'content']

    #Groupのフォーム
    class GroupForm(forms.ModelForm):
        class Meta:
            model = Group
            field = ['owner', 'title']

    #Friendのフォーム
    class FriendForm(forms.ModelForm):
        class Meta:
            model = Friend
            field = ['owner', 'user', 'group']

    #Goodのフォーム
    class GoodForm(forms.ModelForm):
        class Meta:
            model = Good
            field = ['owner', 'message']

    #検索フォーム
    class SearchFOrm(forms.Form):
        search = forms.CharField(max_length=100)

    #Groupのチェックボックスフォーム
    class GroupCheckForm(forms.Form):
        def __init__(self, user, *args, **kwargs):
            super(GroupCheckForm, self).__init__(*args, **kwargs)
            public = User.objects.filter(username='public').first()
            self.fields['groups'] = forms.MultipleChoiceField(
                    choices = [(item.title, item.title) for item in Group.objects.filter(owner__in = [user,public])],
                    widget = forms.CheckboxSelectMultiple(),
            )

    #Groupの選択メニューフォーム
    class GroupSelectForm(forms.Form):
        def __init__(self, user, *args, **kwargs):
            super(GroupSelectForm, self).__init__(*args, **kwargs)
            self.fields['groups'] = forms.ChoiceField(
                    choices = [('-', '-')] + [(item.title, item.title) for item in Group.objects.filter(owner = user)],
            )

    #Friendチェックボックスフォーム
    class FriendsForm(forms.Form):
        def __init__(self, user, friends=[], vals=[], *args, **kwargs):
            super(FriendsForm, self).__init__(*args, **kwargs)
            self.fields['friends'] = forms.MultipleChoiceField(
                    choices = [(item.user, item.user) for item in friends],
                    widget = forms.CheckboSelectMultiple(),
                    initial = vals
            )

    #Group作成フォーム
    class CreateGroupForm(forms.Form):
        group_name = forms.CharField(max_length=50)

    #投稿フォーム
    class PostForm(forms.Form):
        content = forms.CharField(max_length=500, widget = forms.Textarea)
        def __init__(self, user, *args, **kwargs):
            super(PostForm, self).__init__(*args, **kwargs)
            public = User.objects.filter(username='public').first()
            self.fields['groups'] = forms.ChoiceField(
                    choices = [('-', '-')] + [(item.title, item.title) for item in Group.objects.filter(owner__in = [user, public])],
            )
            
    #GroupCheckFormについて
        ModelForm以外のもの(forms.Formの派生クラス)がポイント。
        #__init__による初期化処理
            def __init__(self, user, *args, **kwargs):
        
        ここでは、superで基底クラスの__init__メソッドを呼び出す。
            super(GroupCheckForm, self).__init__(*args, **kwargs)
        
        初期化の処理は、このクラスだけにしかないとは限りないので、基底クラス（継承する元になっているクラス）みも__init__が用意されていて、
        そこに初期化処理が用意されているかかもしれない。
        そこで、__init__メソッドの最初に、基底クラスの__init__を呼び出して初期化処理を実行させておく。super関数は、第1引数にクラス、第2引数に
        インスタンス自身（self）を指定して呼び出すことで、そのインスタンスの基底クラスのインスタンスのあるメソッドを呼び出す。
        
            public = User.objects.filter(username='public').first()
        publicのUserを取得する。これはfilter(username='public')で検索をし、その一番最初のものをfirstで取り出す。
        
            self.fields['groups'] = forms.MultipleChoiceField(
                choices = [(item.title, item.title) for item in Group.objects.filter(owner__in = [user,public])],
                widget = forms.CheckboxSelectMultiple(),
            )
        これが、一番難関。self.field['groups']というのは、このインスタンスのgroupsフィールド。つまり、ここにフィールドを設定することで、クラスに
        groups変数を用意したのと同じことができる。
        ここでは、MultipleChoiceFieldを設定している。これは複数の選択可能な選択項目のフィールド。choicesに選択項目を用意し、widgetには
        CheckboxSelectMultipleを指定。これは、複数項目をすべてチェックボックスとして用意するウィジェット。
        
        #リスト内包表記    →   [(タプル) for ○○ in ○○]    →    [変数など for横文] 
            choicesの[]はリスト。その中にはタプルとfor横文が書かれている。これが「リスト内包表記」というpython横文。
            変数などの後にfor横文を記述している。このforから次々と値を取り出したものが、そのまま前にある変数に代入され、それがリストの項目として
            酔いされている。つまり、forによる繰り返しでリストの項目を生成する。
           
    #GroupSelectFormについて
        利用者のGroupをメニューに持つプルダウンメニューのフォームを生成する。これも__init__による初期化処理で項目を作成する。
            super(GroupSelectForm, self).__init__(*args, **kwargs)
            self.fields['groups'] = forms.ChoiceField(
                    choices = [('-', '-')] + [(item.title, item.title) for item in Group.objects.filter(owner = user)],
            )
        self.fields['groups']で、groupsという項目を作成してChoiceFieldを設定し、プルダウンメニューを用意。ここでの表示項目は、choicesでリスト
        として用意しているため、ここでもリスト内包表記を利用。
            
            for item in Group.objects.filter(owner = user)
        Groupから、ownerがuser（利用者のUser）であるものをまとめて取り出している。
        ここから順にGroupを取り出し、そとtitleの値をタプルにしてメニューの項目として追加している。
    
    #FriendsFormについて
        基本的なやり方は同じ。
            self.fields['friends'] = forms.MultipleChoiceField(
                    choices = [(item.user, item.user) for item in friends],
                    widget = forms.CheckboSelectMultiple(),
                    initial = vals
            )
        「initial」という値は、初期値の設定で、項目名のリストを指定すると、そこにある項目のチェックがONの状態で表示されるようになる。
        
    #PostFormについて
        通常の投稿とシェア投稿で利用されるフォーム。
            content = forms.CharField(max_length=500, widget = forms.Textarea)
            def __init__(self, user, *args, **kwargs):
                super(PostForm, self).__init__(*args, **kwargs)
                public = User.objects.filter(username='public').first()
                self.fields['groups'] = forms.ChoiceField(
                        choices = [('-', '-')] + [(item.title, item.title) for item in Group.objects.filter(owner__in = [user, public])],
                )
        Charfieldはwidget = forms.Textareaという値が用意されている。<textarea>の表示を使うことを設定する。
        publicのUserを変数publicに取り出しして、self.fields['groups']にChoiceFieldを設定している。
        
        #ダイナミックに項目を作るには__init__
            今回のサンプルでは、あらかじめ項目を変数として用意しておくのではなく、フォームのインスタンスを作成する際に項目を生成させている。
            これには、__init__を活用する。フォームの項目は、self.fieldsというところにまとめられている。self.fields['○○']という値にフィールドを
            設定することで、指定の名前の項目を追加できる。
            
    #urls.py作成  →   アプリ名に新規ファイル作成
        from django.urls import path
        from . import views

        urlpatterns = [
                path('', views.index, name='index'),
                path('groups', views.groups, name='groups'),
                path('add', views.add, name='add'),
                path('creategroup', views.creategroup, name='creategroup'),
                path('post', views.post, name='post'),
                path('share/<int:share_id>', views.share, name='share'),
                path('good/<int:good_id>', views.good, name='good'),
        ]
        
        #プロジェクト名/urls.pyに追記
            path('アプリ名/', include('アプリ名.urls')),
            
    #views.pyの修正    →   アプリ名/views.pyに記述
        from django.shortcuts import render
        from django.shortcuts import redirect
        from django.contrib.auth.models import User
        from django.contrib import message
        from .models import Message, Friend, Group, Good
        from .forms import GroupCheckForm, GroupSelectForm, SearchForm, FriendsForm, CreateGroupForm, PostForm
        from django.db.models import Q
        from django.contrib.auth.decorators import login_required

        # indexのビュー関数
        @login_required(login_url=='/admin/login/')
        def index(request):
            # publicのuserを取得
            (public_user, public_group) = get_public()

            # POST送信時の処理
            if request.method =='POST':

                #Groupsのチェックを更新した時の処理
                if request.POST['mode'] == '__chek_form__':
                    # フォームを用意
                    searchform = SearchForm()
                    checkform = GroupCheckForm(request.user,request.POST)
                    # チェックされたGroup名をリストにまとめる
                    glist = []
                    for item in request.POST.getlist('groups'):
                        glist.append(item)
                    # Messageの取得
                    message = get_your_group_message(request.user. glist, None)

                # Groupsメニューを変身したときの処理
                if request.POST['mode'] == '__search_form__':
                    # フォームの用意
                    searchform = SearchForm(request.POST)
                    checkform = GroupCheckForm(request.user)
                    # Groupのリストを取得
                    gps = Group.objects.filter(owner = reqeust.user)
                    glist = [public_group]
                    for item in gps:
                        glist.append(item)
                    message = get_your_group_message(request.user, glist, request.POST['search'])

            # GETアクセス時の処理
            else:
                # フォームの用意
                searchform = SearchForm()
                checkform = GroupCheckForm(request.user)
                # Groupのリストを取得
                gps = Group.objects.filter(owner = request.user)
                glist = [public_group]
                for item in gps:
                    glist.append(item)
                # メッセージの取得
                message = get_your_group_message(request.user, glist, None)

            params = {
                    'login_user':request.user,
                    'contents':messages,
                    'check_form':checkform,
                    'search_form':searchform,
                }
            return render(request, 'sns/index.html', params)

        @login_required(login_url='/admin/login/')
        def groups(request):
            # 自分が登録したFriendを取得
            friends = Friend.objects.filter(owner = request.user)

            # POST送信時の処理
            if request.method == 'POST':

                # Groupメニュー選択肢の処理
                if request.POST['mode'] == 'groups_form__':
                    # 選択したGroup名を取得
                    sel_group = request.POST['groups']
                    # Groupを取得
                    gp = Group.objects.filter(owner = request.user).filter(title = sel_group).first()
                    # Groupに含まれるFriendを取得
                    fds = Friend.objects.filter(owner = request.user).filter(group = gp)
                    # FriendのUserをリストにまとめる
                    vlist = []
                    for item in fds:
                        vlist.append(item.user.username)
                    # フォームの用意
                    groupsform = GroupSelectForm(request.user, request.POST)
                    friendsform = FriendForm(request.user, friends = friends, val = vlist)

                # Friendsのチェック更新時の処理
                if request.POST['mode'] == '__friends_form__':
                    # 選択したGroupの取得
                    sel_group = request.POST['group']
                    group_obj = Group.objects.filter(title = sel_group).first()
                    # チェックしたFriendsを取得
                    sel_fds = request.POST.getlist('firends')
                    # FriendsのUserを取得
                    sel_users = User.objects.filter(username__in = sel_fds)
                    # Userのリストに含まれるユーザーが登録したFriendを取得
                    fds = Friend.objects.filter(owner = request.user).filter(user__in = sel_users)
                    # すべてのFriendにGroupを設定し保存する
                    vlist = []
                    for item in fds:
                        item.group = group_obj
                        item.save()
                        vlist.append(item.user.username)
                    # メッセ0時設定
                    message.success(request, ' チェックされたFriendを' + sel_group + 'に登録しました。')
                    # フォームの用意
                    groupsform = GroupSelectForm(request.user, {'groups':sel_group})
                    friendsform = FriendsForm(request.user, friends = friends, vals = vlist)

            # GETアクセス時の処理
            else:
                # フォームの用意
                groupsform = GroupSelectForm(request.user)
                friendsform = FriendsForm(request.user, friends = friends, vals = [])
                sel_group = '-'

            # 共通処理
            createform = CreateGroupForm()
            params = {
                    'login_user':request.user,
                    'groups_form':groupsform,
                    'friends_form':friendsform,
                    'create_form':createform,
                    'group':sel_group,
            }
            return render(request, 'sns/groups.html', params)

        # Friendの追加処理
        @login_required(login_url = '/admin/login/')
        def add(request):
            # 追加するUserを取得
            add_name = request.GET['name']
            add_user = User.objects.filter(username = add_name).first()
            # Userが本人だった場合の処理
            if add_user == request.user:
                message.info(request, "自分自身をFriendに追加することはできません。")
                return redirect(to = '/sns')
            # publicの取得
            (public_user, public_group) = get_public()
            # add_userのFriendの数を調べる
            frd_num = Friend.objects.filter(owner = request.user).filter(user = add_user).count()
            # ゼロより大きければ既に登録済み
            if frd_num > 0:
                messages.info(request, add_user.username + ' は既に追加されています。')
                return redirect(to = '/sns')
            # ここからFriendの登録処理
            frd = Friend()
            frd.owner = request.user
            frd.user = add_user
            frd.group = public_group
            frd.save()
            # メッセージを設定
            message.success(request, add_user.username + ' を追加しました！groupページの移動して、追加したFriendをメンバーに設定してください。')
            return redirect(to = '/sns')

        #グループの作成処理
        @login_required(login_url='/admin/login/')
        def creategroup(request):
            #Groupを作り、Userとtitleを設定して保存する
            gp = Group()
            gp.owner = request.user
            gp.title = request.POST['group_name']
            gp.save()
            messages.info(request, '新しいグループを作成しました。')
            return redirect(to = '/sns/groups')

        # メッセージのポスト処理
        @login_required(login_url = '/admin/login/')
        def post(request):
            if request.method == 'POST':
                # 送信内容の取得
                gr_name = request.POST['groups']
                content = request.POST['content']
                # Groupの取得
                group = Group.objects.filter(owner = request.user).filter(title = gr_name).first()
                if group == None:
                    (pub_user, group) = get_public()
                # Messageを作成し設定して保存
                msg = Message()
                msg.owner = request.user
                msg.group = group
                msg.content = content
                msg.save()
                # メッセージを設定
                message.success(request, '新しいメッセージを投稿しました！')
                return redirect(to = '/sns')

            # GETアクセル時の処理
            else:
                form = PostForm(request.user)

            #共通処理
            params = {
                    'login_user':request.user,
                    'form':form,
                }
            return render(request, 'sns/post.html', params)

        # 投稿をシェアする
        @login_required(login_url = '/admin/login/')
        def share(requst, share_id):
            # シェアするMessageの取得
            share = Message.objects.get(id = share_id)

            # POST送信時の処理
            if request.method == 'POST':
                # 送信内容を取得
                gr_name = request.POST['groups']
                content = request.POST['content']
                # Groupの取得
                group = Group.objects.filter(owner = request.user).filter(title = gr_name).first()
                if group == None:
                    (pub_user, group) = get_public()
                # メッセージを作成し、設定をして保存
                msg = Message()
                msg.owner = request.user
                msg.group = group
                msg.content = content
                msg.share_id = share.id
                msg.save()
                share_msg = msg.get_share()
                share_msg.share_conut += 1
                share_msg.save()
                #メッセージを設定
                messages.success(request, 'メッセージをシェアしました！')
                return redirect(to = '/sns')

            #共通処理
            form = PostForm(request.uuser)
            params = {
                    'login_user':request.user,
                    'form':form,
                    'share':share,
                }
            return render(request, 'sns/share.html', params)

        # goodボタンの処理
        @login_required(login_url='/admin/login/')
        def good(request, good_id):
            # gppdするMessageを取得
            good_,sg = Message.objects.get(id = good_id)
            # 自分がメッセージにGoodした数を調べる
            is_good = Good.objects.filter(owner = request.user).filter(message = good_msg).count()
            # ゼロより大きければ既にgood済み
            if is_good > 0:
                messages.success(request, '既にメッセージにはGoodしています。')
                return redirect(to='/sns')

            # Messageのgood_countを1増やす
            good_msg.good_count += 1
            good_msg.save()
            # Goodを作成し、設定して保存
            good = Good()
            good.owner = request.user
            good.message = good_msg
            good.save()
            # メッセージを設定
            message.success(request, 'メッセージにGoodしました！')
            return redirect(to = '/sns')

        # これ以降はビュー関数ではなく普通の関数=========================

        # 指定されたグループおよび検索文字によるMessageの取得
        def get_your_group_message(owner, glist, find):
            # publicの取得
            (public_user, public_group) = get_public()
            # チェックされたGroupの取得
            groups = Group.objects.filter(Q(owner = owner) | Q(owner = public_user)).filter(title__in=glist)
            # Groupに含まれるFriendの取得
            me_friends = Friend.objects.filter(group__in = groups)
            # FriendのUserをリストにまとめる
            me_users = []
            for f in me_friends:
                me_users.append(f.user)
            # UserリストのUserが作ったGroupの取得
            his_groups = Group.objects.filter(owner__in = me_users)
            his_friends = Friend.objects.filter(user = owner).filter(group__in = his_groups)
            me_groups = []
            for hf in his_friends:
                me_groups.append(hf.group)
            # groupがgroupsに含まれるか、me_groupsに含まれるMessageの取得
            if find == name:
                messages = Message.objects.filter(Q(group__in = groups) | Q(group__in = me_groups))[:100]
            else:
                messages = Message.objects.filter(Q(group__in = groups) | Q(group__in = me_groups)).filter(content__contains=find)[:100]
            return messages

        # publicなUserとGroupを取得する
        def get_public():
            public_user = User.objects.filter(username='public').first()
            public_group = Group.objects.filter(owner = public_user).first()
            return (public_user, public_group)

    #index関数について
        これは、アプリ名のトップページの処理を行うもので、大きく4つの部分からなる。
            ●普通にGETアクセスした際の処理。
            ●特定のグループを選択して投稿を見る時の処理。
            ●投稿を検索したときの処理。
            ●すべてで必要になる共通処理
        このうち、共通処理の変数paramsに必要な値をまとめ、renderで変数とテンプレートを指定して表示を行うだけ。
            params = {
                'login_user':request.user,
                'contents':messages,
                'check_form':checkform,
                'search_form':searchform,
            }
        login_user以外のものは、それぞれmessage,checkform, searchformという変数を設定しているので、共通処理以外の3つは変数を用意する
        ということのなる。
        
        #authによるごルインユーザー
            login_userは、現在ログインしているユーザーのこと。request.userで取り出すことができる。
            Djangoのプロジェクトで、django.contrib.authというアプリケーションが組み込まれている。
            （プロジェクト名にあるsettings.pyのINSTALLEE_APPS変数部分を確認）
            django.contrib.authは、Djangoに組み込まれているユーザー認証機能。これは、先にDjangoの管理ツールで利用したときのログインユーザーを
            作成した機能と同じ。
            request.userで得られたユーザー情報は、Userというクラスのインスタンスになっている。これを使うには下記のimport文を用意しておく。
                from django.contrib.auth.models import User
                
        #ログイン必要にするには
            ユーザー認証機能は、ただdjango.contrib.authアプリをインストールするだけで自動的にページん組み込まれない。ユーザー認証を利用したい
            ページに設定する必要がある。
            それを行うのが、index関数の前にある。
                @login_required(login_url = '/admin/login/')
            @login_requiredというのは、「アノテーション」と呼ばれるもの。アノテーションは関数やクラスなどに特定の役割や設定などを割り振るにに使われる
            引数は、login_urlという値でログインページのURLを指定するもの。/admin/login/　は django.contrib.authのログインページになる。
            これで、@login_requiredアノテーションを付けたビュー関数によって、ログインしないとアクセスができなくなる。ログインしていないユーザーが
            アクセスすると、自動的にログインページにリダイレクトされる。
            なお、@login_requiredアノテーションを利用するには、必ず書くこと。
                from django.contrib.auth.deecorators import login_required
                
        #GETアクセス時の処理
            GETアクセスした際の処理。SearchFormとGroupCheckFormを用意して、それから表示するMessageのリストを用意する。
                searchform = SearchForm()
                checkform = GroupCheckForm(request.user)
            SearchFormは、ただインスタンスを作るだけでGroupCheckFormは、引数にrequest.userを指定（これは、ログインしているユーザーを
            request.userで指定するだけ）
            
            1．自分が作成したGroupを用意する
            2．変数に、リストを設定する。最初にpublic_group(publicのGroupが設定された変数)を入れておく
            3．繰り返しを使い、1から順にGroupを取り出してリストに追加していく
            4．gey_your_group_message関数を使い、Messageリストを得る
            
            検索そのものはget_your_group_messageという関数で行っている。この関数は、Userと検索対象になるGroup、そして検索テキストを引数に指定して
            呼び出すと、それを元に投稿メッセージのリストを生成して返す。
            
        #選択したグループの投稿を表示
            グループを選択してPOSTした時の処理。既に、「投稿メッセージを得るにはget_your_group_message関数を使う」を使うので、SearchFormと
            GroupCheckFormを用意する。SearchFormはただインスタンスを作るだけで、注意が必要。
                checkform = GroupCheckForm(request.user, request.POST)
            この処理は、表示されているグループのチェックボックスのフォーム(GroupCheckForm)を選択して送信された時の処理なので、request.POSTを
            引数を指定する。これをしないと、チェックボックスの選択状態が再現されない。
            後は、自分のグループとpublicグループをリストにまとめてget_your_group_messageを呼び出すだけ。
            
        #検索された投稿を表示
            検索フィールドから送信された時の処理。
            フォームを用意して、GroupCheckFormはrequest.POSTを引数の指定するだけ。SearchFormは
                searchform = SearchForm(request.POST)
            これで検索テキストがちゃんと残る形で検索フォームが再現される。後は、get_your_group_messageで検索する際、入力された検索テキストを指定する。
                message = get_your_group_message(request.user, glist, request.POST['search']
            get_your_group_messageの第3引数に、request.POST['search']を指定して、送信された入力フィールドのテキストが検索テキストとして
            してされて関数が呼び出される。
            
    #groupsビュー関数について
        グループとフレンドの管理をするページの処理。全体の処理は4つ。
            1．GETアクセス時の処理
            2．Groupsの選択メニューでグループを選択した時のPOST処理
            3．Friendsのチェックボックスを選択してPOST送信した時の処理
            4、すべての共通処理
            
            メソッドの最初は自分が追加してあるFriendを取り出す。
                friends = Friend.objects.filter(owner = request.user)
            このページはフレンド関係の設定を行うため、「自分が登録してある全Friend」は必ず必要になる。そのため最初に用意してある。
            まあ、処理の最後にあるのは、params変数を用意してテンプレートとともにrenderする処理。
                params = {
                    'login_user':request.user,
                    'groups_form':groupsform,
                    'friends_form':friendsform,
                    'create_form':createform,
                    'group':sel_group,
                }
            ログインユーザーと3つのフォーム、そして選択されたグループを示すgroupという値が用意されている。これらの内、createform(CreateGroupForm
            インスタンス)は、共通処理の部分で作成している。ほかの2つのフォームと選択されたグループの値を用意するのが、共通処理以外の部分で行う。
        
        #GET時の処理
            GroupSelectForm、FriendsForm、sel_groupを用意する。
                groupsform = GroupSelectForm(request.user)
                friendform = FriendsForm(request.user, friends = friends, vals=[])
                sel_group = '-'
            GroupSelectFormは、Userを引数に指定してインスタンスを作るだけ。
            FriendFormは、User、表示するFriendのリスト、そして選択状態にしておくFriendのリストを指定している。
            グループの選択は、'-'項目（どのグループも選択されてない場合の項目）、選択されたFriendwo示すvalsは空のリスト。
        
        #Groups選択メニュー選択時の処理
            Groups選択メニューでGroup を選び送信した時の処理。
            選択したGroupに登録されているFriendがすべてチェックをONにした状態で表示されるようにする。
                1．まず、送信されたフォームの値をsel_groupに取り出す
                2．titleがsel_groupのGroup（メニューで選択したGroup）を取り出す
                3．自分で作ったもので、しかも2のGroupが設定されているFriendを取り出す
                4．取り出したFriendのUserのusernameをすべてりすとにまとめる
                5．valsに4のリストを指定してFriendFormを作成する
                6．GroupSelectFormは普通に作るだけ
            FriendsFormを作るときに「どのFriendのチェックをONにしておくか」を指定しないといけない。そのために、2~4の処理がある。
            
        #Friendチェックボックス送信時の処理
            Friendsのチェックボックスを選択して送信した時の処理。これは、設定されたGroups選択メニューと、選択されたFriendsチェックボックスの値を
            取り出し、それを元にフォームを用意する。
            
                sel_fds = request.POST.getlist('friends')
            送信されたfriendsの値を変数に取り出す。これは、getlistというメソッドを使い、選択されたすべての項目の値をリストとして取り出すことができる。
            取り出したリストをもとに、Userを取り出していく。
            
                sel_users = User.objects.filter(username__in = sel_fds)
            Userのusernameが、リストの名前に含まれているものを検索している。「ある値がリストにふくまれているか」で検索する場合は、filterの条件に
            「○○__in = リスト」というように設定する。__inは、その後にあるリストに含まれていることを表すのに使う。
            後は、取り出したUserをもとに、Friendを取り出す。これもuserの値がsel_usersに含まれたいるものを取り出す。
            
                fds = Friend.objects.filter(owner = request.user).filter(user__in = sel_users)
            
            これで、選択されたチェックのFriendを取り出し、Friendのgroupに、選択されているGroupを設定してvlistリストにFriendを追加していく。
                vlist = []
                for item in fds:
                    item.group = group_obj
                    item.save()
                    vlist.append(item.user.username)
            選択したFriendのGroup設定と、選択されたチェックボックスのリストができ、これらを元に、GroupSelectFormとFriendsFormを作成すれば良い。
            
        #システムメッセージを使う
                messages.success(request, ' チェックされたFriendを' + sel_group + 'に登録しました。')
            このmessageは from django.contrib import messagesという文でimportされているモジュール。これは、システムメッセージをひょうじする
            「メッセージフレームワーク」と呼ばれる機能。django.contrib.messagesというアプリとしてプロジェクトに組み込まれている。
            システムメッセージは、画面に表示させたいメッセージを作成するための仕組み。messagesのメソッドを呼び出すことで、システムメッセージを
            作成できます。作成したシステムメッセージは、簡単にテンプレートで表示させることができます。
            システムメッセージは、必要に応じていくらでも作成し追加することができ、それらは、次に画面が表示されたときにすべて表示できる。一度表すると
            作成したシステムメッセージは自動的に消える。
            ここでは、successというメソッドを使っているが、他にもいくつかのものが用意されている。
                messages.debug(request, メッセージテキスト)
                messages.info(request, メッセージテキスト)
                messages.success(request, メッセージテキスト)
                messages.warning(request, メッセージテキスト)
                messages.error(request, メッセージテキスト)
            これらいずれも同じようにシステムメッセージを追加する。違いは、メッセージの重要度。メッセージフレームワークは、重要度別にどこまでメッセージ
            を表示するか設定したり、特定のメッセージだけを表示させたりする機能を持っている。
            
    #Friendの追加について
        add関数は、Friendを追加するための処理。投稿メッセージにある「add firend」というリンクをクリックすると呼び出される。
        1．Friend登録するユーザーの名前が送信されるので、それを変数に取り出す。
        2．そのUserを取り出す。
        3．Userが本人だった場合はメッセージを設定して戻る
        4．ownerが本人で、userが追加するUserであるFriendの数を調べる
        5．数がゼロより大きければ、既に登録済みなのでメッセージを表示して戻る
        6．Friendの登録処理に進む。Friendインスタンスを作り、ownerとuser、groupを設定して保存する
        7．Friend登録のシステムメッセージを追加して戻る
        
    #投稿とシェア投稿について
        メッセージの投稿は2種類ある。普通の投稿と、シェア投稿。シェア投稿は、既に投稿されたメッセージをシェアする投稿。
        これを、それぞれpostとshareという関数として用意する。
        1．投稿されたメッセージとグループの値を変数に取り出す
        2．選択されたグループのGroupを取得する
        3．GroupがNone（ない状態）だった場合は、publicのGroupを取り出しておく
        4．Messageインスタンスを作り、owner、group、contentを設定する
        5．シェア投稿の場合は、シェアするMessageのidをshare_idに設定する
        6．Messageをsaveで保存する
        7．システムメッセージを設定して戻る
        シェア投稿の場合は、Messageのshare_idにシェアするMessageのidを設定しているだけ。
        
    #「いいね！」の処理
        「いいね」＝「good!」。これをクリックした時の処理がgood関数。
        1．good!したMessageを取り出す
        2．ownerが自分でmessageがこのMessageであるGoodを検索し、その数を調べる
        3．数がゼロより大きければ、既にそのMessageにgood!したということなので、システムメッセージを設定して戻る
        4．Messageのgood_countを1増やしてsaveする
        5．Goodインスタンスを作成し、ownerに本人のUser,messageにgood!したMessageを設定してsaveする
        6．システムメッセージを設定して戻る
        
    #get_your_group_messageが最大のポイント
        1．publicなユーザーを取得する
            (public_user, public_group) = get_public()
        2．チェックボックスがONになってるGroupを取得する
            groups = Group.objects.filter(Q(owner = owner) | Q(owner = public_user)).filter(title__in = glist)
        3．groupsに追加されているFriendを取得する
            me_friends = Friend.objects.filter(group__in = groups)
        4．me_friendsのUserをリストにまとめる
            me_users = []
            for f in me_friends:
                me_users.appedn(f.user)
        5．me_user(つまり、自分のGroupに含まれている利用者たち)が作ったGroupを取得する
            his_groups = Group.objects.filter(owner__in = me_users)
        6．userが自分で、groupがhis_groupsに含まれるFriendを取得する
            his_friends = Friend.objects.filter(user = owner).filter(group__in = his_groups)
        7．his_friendsのGroupをリストにまとめる
            me_groups = []
            for hf in his_friends:
                me_groups.append(hf.group)
        8．検索文字がなければ、groupがgroupかme_groupsに含まれるMessageを取得する
            messages = Message.objects.filter(Q(group__in = groups) | Q(group__in = me_groups))[:100]
        9．検索文字がある場合は、更にcontentに検索文字findが含まれているMessageを取得する
            messages = Message.objects.filter(Q(group__in = groups) | Q(group__in = me_groups)).filter(content__contains = find)[:100]
        10．得られたMessageを返しておしまい
            Messageの取得は、「自分のGroup」「Groupに含まれるFriendとUser」「含まれるUserが作成したGroup」「そのGroupの中で自分がFriendとして
            含まれたいるGroup」「そのGroupに相手が投稿したメッセージ」というようにGroupとFriendとUserを探し回って取り出していく
            
